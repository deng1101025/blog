"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4402],{6736:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-1aeb6210",path:"/assets/react/sourceCodeAnalysis/%E4%BB%A3%E6%95%B0%E6%95%88%E5%BA%94.html",title:"代数效应",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"代数效应",description:"代数效应"},excerpt:"",headers:[],filePathRelative:"assets/react/sourceCodeAnalysis/代数效应.md",git:{updatedTime:null,contributors:[]}}},4130:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="代数效应" tabindex="-1"><a class="header-anchor" href="#代数效应" aria-hidden="true">#</a> 代数效应</h1><p>由于看了react源码，发现了一个名词 “代数效应”，很纠结，这是啥，跟代数有啥关联。。很费解，也很抽象。所以在这里记录一下我的简单理解</p><blockquote><p>react 应用解释： 让副作用从函数中分离</p></blockquote><p>由于《代数效应》很抽象，就用简单的例子来解释吧，这不能代表《代数效应》，目前他还是抽象概念，下面的例子肯定涵盖不全</p><h4 id="给大家看个例子" tabindex="-1"><a class="header-anchor" href="#给大家看个例子" aria-hidden="true">#</a> 给大家看个例子</h4><p>es6方式解决异步</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 通过promise 异步获取信息</span>\n<span class="token keyword">function</span> <span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">await</span> <span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>引入代数效应概念的方式（ perform, try handle, resume with ）关键字，概念</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tperform <span class="token string">&#39;getInfo&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">try</span><span class="token punctuation">{</span>\n\t<span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token function">handle</span> <span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>effect <span class="token operator">===</span> <span class="token string">&#39;getInfo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\tresume <span class="token keyword">with</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面的例子看了可能不明白，现在讲解一下，getData 在第一个例子中是异步函数，为啥呢，因为里面有await，导致传染给了自己，让自己也染上了异步的特性，但是如果有场景，自己不能是异步怎么办呢，没办法，所以 第二个例子就可以完美解决。</p><p>大家也看出来了，上面用到的try handle，这不是跟try/catch很像么，是的，因为这是伪代码，模仿try/catch的，哈哈，因为这种应用场景跟他很像，不过细心的同学就会发现他们的不同了，try/catch一旦出发catch会立即释放try里面的内存空间，也就是里面的上下文没有了，已经成过去式了。但是try/handle可不是，他更像是暂停，执行完handle之后又回去继续执行了，而且可以复用上下人，是不是很强大</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>《代数效应》 就这？不，肯定没这么简单，但是我们可以简单的，片面的理解成这样，如果javascript语言引入代数效应，挺强大</p>',13),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);