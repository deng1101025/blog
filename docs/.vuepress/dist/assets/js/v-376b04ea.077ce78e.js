"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2732],{909:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-376b04ea",path:"/assets/javascript/8.%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js.html",title:"我也不知道的js",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"我也不知道的js",description:"我也不知道的js"},excerpt:"",headers:[{level:3,title:"我的疑问",slug:"我的疑问",children:[]}],filePathRelative:"assets/javascript/8.我也不知道的js.md",git:{updatedTime:null,contributors:[]}}},8939:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6252);const t=(0,e._)("p",null,"以前不怎么认真读js的MDN文档，后来看到了一位大佬对var/let/const 变量提升做了详细解释之后 有所顿悟，但是还有不明白的地方，自此记录下来，以免忘记",-1),o=(0,e.Uk)("由于篇幅太长，我就不自己打一遍了，看看大佬的原文吧："),p={href:"https://zhuanlan.zhihu.com/p/28140450",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("我用了两个月的时间才理解 let"),l=(0,e.uE)('<h3 id="我的疑问" tabindex="-1"><a class="header-anchor" href="#我的疑问" aria-hidden="true">#</a> 我的疑问</h3><p>在大佬的文章里有这两段代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 代码1：</span>\n<span class="token keyword">var</span> foo\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n\n<span class="token comment">// 代码2：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> foo\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>问输出的是什么，你要是看了原文，你会发现大佬的这句话</p><blockquote><p>答案：由于 function 比 var 多一个「赋值」过程，所以两个代码的输出都是函数。你也可以记住结论：function 比 var 牛逼。</p></blockquote><p>但是我觉得大佬也没研究透，我想了想，也没研究透，仅仅做了几个设想</p><p>js的变量提升是有优先级的，var 的优先级比function的优先级高，也就是说无论你把var foo放哪里，都是先创建、初始化变量foo，然后再创建、初始化、赋值function foo，这样解释的话可以对代码1进行分解：</p><p>a. 先创建变量a，然后初始化未undefined。 b.再创建function的变量、初始化、同时赋值未function(){}。 c. 执行到var foo的时候 没有赋值，所以不做改动。 最终输出foo就是foo这个方法了</p><p>根据刚刚的，然后对 代码2 进行解析。解析步骤你会发现是一样的，最终你那个输出的都是foo的function。猜想和结论是一样的</p><p>结论： js引擎在执行代码的时候，从上到下</p><p>创建执行环境（执行域，各种叫法不一） 寻找有没有var的变量，进行提升（创建、初始化为undefined） 寻找有没有function的声明，进行提升（创建、初始化undefined，赋值）（这里我也不知道function还用不用初始化为undefined，因为还得赋值，有点多此一举，这可能只有js引擎开发的团队才知道了） let跟var也是一样的，也会提升，仅仅创建，不做初始化</p><p>另一个猜想，就是大佬说的，function比var牛逼，但是我觉得，哈哈，不说了 欢迎大佬们指出帮助解惑</p>',12),u={},i=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[o,(0,e._)("a",p,[c,(0,e.Wm)(a)])]),l],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);