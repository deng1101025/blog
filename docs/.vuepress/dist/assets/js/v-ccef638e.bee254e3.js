"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6303],{4249:(e,r,c)=>{c.r(r),c.d(r,{data:()=>a});const a={key:"v-ccef638e",path:"/assets/react/sourceCodeAnalysis/react17%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20scheduler%20%20reconciler%20%20renderer.html",title:"react17 源码解析之 scheduler  reconciler  renderer",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"react17 源码解析之 scheduler  reconciler  renderer",description:"react17 源码解析之 scheduler  reconciler  renderer"},excerpt:"",headers:[{level:3,title:"各个阶段所作的工作",slug:"各个阶段所作的工作",children:[]}],filePathRelative:"assets/react/sourceCodeAnalysis/react17 源码解析之 scheduler  reconciler  renderer.md",git:{updatedTime:null,contributors:[]}}},2450:(e,r,c)=>{c.r(r),c.d(r,{default:()=>l});const a=(0,c(6252).uE)('<h1 id="react17-源码解析之-scheduler-reconciler-renderer" tabindex="-1"><a class="header-anchor" href="#react17-源码解析之-scheduler-reconciler-renderer" aria-hidden="true">#</a> react17 源码解析之 scheduler reconciler renderer</h1><p>react17 在渲染的时候用的已经不是递归的同步方式，换成了异步的并发方式（ 异步队列在浏览器空闲时间进行协调，只有协调阶段才是异步队列（ 也就是执行任务切分后的 工作单元 ） ）</p><h3 id="各个阶段所作的工作" tabindex="-1"><a class="header-anchor" href="#各个阶段所作的工作" aria-hidden="true">#</a> 各个阶段所作的工作</h3><h4 id="scheduler-阶段" tabindex="-1"><a class="header-anchor" href="#scheduler-阶段" aria-hidden="true">#</a> scheduler 阶段</h4><p>scheduler阶段，由于requestIdleCallback 的兼容性不是很好，react用的是手写的requestIdleCallback，但是功能差不多，都是对任务队列的分优先级调用，requestIdleCallback可以很大程度上解决react在大项目上的性能瓶颈问题</p><blockquote><p>在这里简要说一下用传统diff（同步递归）的方法会导致的性能瓶颈。首先要了解 帧 这个概念，大家知道，一般浏览器的fps是60（当然也有90和120等），大多数都是60，也就是说在1000毫秒内，浏览器会刷新60此，一次的时间间隔是约等于16.7ms，也就是说在16.7ms内要准备好要更新到屏幕上的东西，如果没准备好，就会掉帧。如果是大型项目，同步递归会消耗的市场远远大于16.7ms，如果这时出现更高优先级的任务（比如用户点击按钮或者输入信息），由于主线程被长时间占用，就会导致GUI渲染线程被长时间挂起不能立即响应用户的操作导致视觉卡顿和延迟，所以改用异步并发的方式可以有效解决这个问题，这就是为什么fiber会出现</p></blockquote><p>scheduler 做了哪些事情呢 workLoop 大循环（根据是否存在任务队列和浏览器是否有空余时间进行工作单元的执行），而且会分优先级，workLoop执行可以被中断和复用，会根据优先级优先执行优先级更高的任务队列，如果有更高的优先级（比如用户点击按钮或者输入信息），workLoop循环会暂停，等待空闲时间，而且可以给任务设置超时时间，提高任务的优先级（一面任务一直得不到执行）</p><h4 id="reconciler-协调阶段" tabindex="-1"><a class="header-anchor" href="#reconciler-协调阶段" aria-hidden="true">#</a> reconciler 协调阶段</h4><p>协调阶段存在于scheduler 阶段里面，每一个工作单元里面都有协调</p><p>协调阶段做的工作比较零碎，比如对比哪些dom发生了更新，调整任务优先级，协调子节点为fiber节点等等</p><h4 id="renderer-渲染阶段" tabindex="-1"><a class="header-anchor" href="#renderer-渲染阶段" aria-hidden="true">#</a> renderer 渲染阶段</h4><p>此阶段是同步执行阶段</p><p>会递归的把需要更新的fiber单链表 给render到页面上（上树），没啥好讲的这个阶段</p>',13),d={},l=(0,c(3744).Z)(d,[["render",function(e,r){return a}]])},3744:(e,r)=>{r.Z=(e,r)=>{for(const[c,a]of r)e[c]=a;return e}}}]);